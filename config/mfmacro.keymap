
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  macros {
        mini: minimize {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp SPACE &kp N>
                , <&macro_release &kp RALT>
                ;
        };
    };
  behaviors {
      calt: alt_ctrl {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&mo 3>, <&kp LSHIFT>;
        mods = <(LALT)>;
      };
      talt: alt_tab {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp ESC>, <&kp TAB>;
        mods = <(LALT)>;
      };
      mialt: mini_alt {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <200>;
        bindings = <&kp>, <&mini>;
        display-name = "Mini Alt";
      };
    };
  keymap {
        compatible = "zmk,keymap";

        default_layer {
// ----------------------------------------
// |   TALT       |   ⬆      |  MINI  |  BT(PREV)  |
// |   ⬅          |   ⬇      |   ⮕    |  BT(CLR)   |
// |   PREV       |   PL/PA  |  NEXT  |  BT(NXT)   |
// |   LT(1)      |   MO(2)  |  CALT  |  LT(MO4SP) |
// ----------------------------------------
            bindings = <
                &lt 1 LWIN &mo 2 &calt &lt 4 SPACE
                &kp C_PREV &kp C_PP &kp C_FF &bt BT_NXT 
                &kp LEFT &kp DOWN &kp RIGHT &bt BT_CLR_ALL
                &talt &kp UP &mialt LALT 0 &bt BT_PRV
            >;
        };

        calc_layer {
// ----------------------- #1
// |  7  |  8  |  9  |  /  |
// |  4  |  5  |  6  |  *  |
// |  1  |  2  |  3  |  -  |
// |  T  |  0  |  .  |  +  |
// -----------------------
            bindings = <
                &trans &kp N0 &kp PERIOD &kp PLUS
                &kp N1 &kp N2   &kp N3 &kp MINUS
                &kp N4 &kp N5  &kp N6 &kp KP_MULTIPLY
                &kp N7 &kp N8 &kp N9 &kp KP_DIVIDE
            >;
        };

        f_layer {
// ----------------------- #2
// | F13 | F14 | F15 | F16 |
// | F17 | F18 | F19 | F20 |
// | F21 | F22 | F23 | F24 |
// |     |  T  |     |     |
// -----------------------
            bindings = <
                &none &trans &none &none
                &kp F21 &kp F22 &kp F23 &kp F24
                &kp F17 &kp F18 &kp F19 &kp F20
                &kp F13 &kp F14 &kp F15 &kp F16
            >;
        };
        layer_3 {
// ----------------------- #3
// | N/A | N/A | N/A | N/A |
// | N/A | N/A | N/A | N/A |
// | N/A | N/A | N/A | N/A |
// |     |     |  T  |     |
// -----------------------

            bindings = <
                &none &none &trans &none
                &none &none &none &none
                &none &none &none &none
                &none &none &none &none
            >;
        };
        layer_4 {
// ----------------------- #4
// | N/A | N/A | N/A | N/A |
// | N/A | N/A | N/A | N/A |
// | N/A | N/A | N/A | N/A |
// |     |     |     |  T  |
// -----------------------
            bindings = <
                &none &none &none &trans
                &none &none &none &none
                &none &none &none &none
                &none &none &none &none
            >;
        };
    };
};

